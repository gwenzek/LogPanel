// Reference at:
// https://docs.python.org/3/library/logging.config.html#logging-config-dictschema
{
    "version": 1,
        "root": {
        "level": "INFO",
        // Chose where the logging should go to. Both console and panel can be active
        "handlers": [
            "console",
            "log_panel",
        ],
    },
    "loggers": {
        "LogPanelSnitch": {"handlers": ["snitch_panel"], "propagate": false},
        // Add other loggers here if you want. eg:
        // "MyPlugin": {"level": "DEBUG"},
        // "AnnoyingPlugin": {"level": "CRITICAL"},
    },
    // This is very important do not remove :-)
    "disable_existing_loggers": false,
    // Converts all `print` call to a log to a dedicated view.
    "snitch": false,
    "formatters": {
        "simple": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        },
        // No date to match the `print` calls.
        "no_date": {
            "format": "%(name)s - %(levelname)s - %(message)s",
        },
        // Show the name of the module that did the raw print
        "snitch": {
            "format": "%(asctime)s - %(module)s - %(levelname)s - %(message)s",
        },
    },
    "handlers": {
        // Outputs to regular Sublime console (Ctrl+`).
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "no_date",
            "stream": "ext://sys.stdout",
        },
        // Outputs to a Logging panel.
        // You can copy this to create another panel.
        "log_panel": {
            "class": "LogPanel.sublime_logging.OutputPanelHandler",
            "level": "DEBUG",
            "formatter": "simple",
            "name": "Logging"
        },
        // Outputs to a dedicated LoggingSnitch panel
        "snitch_panel": {
            "class": "LogPanel.sublime_logging.OutputPanelHandler",
            "level": "DEBUG",
            "formatter": "snitch",
            "name": "LoggingSnitch",
        },
    },
}
